Эта справка создана для сборок React проектов. Курс React Hillel.

Для минимального старта нам необходимо установить библиотеки:

0.1. Инициализация проекта
	>npm init -y 

0.2. Установка самого react
	>npm install react react-dom
 
1.1. Установка webpack
	>npm install -D webpack webpack-cli

Устанавливаем лоадеры

1.2. Устанавливаем библиотеку babel для конвертации javascript и jsx кода в ES5 стандарт
	>npm install -D @babel/core babel-loader @babel/preset-env @babel/preset-react

@babel-core - преобразует код ES6 в ES5.
@babel-loader - используется для загрузки наших JSX/JavaScript 
@babel/preset-env - этот пресет используется для транспайлинга кода ES6/ES7/ES8 в ES5.
@babel/preset-react -  этот пресет используется для транспайлинга кода JSX в ES5.

Опции babel-loader можно описывать в самом webpack.config.js но лучше это сделать 
в отдельном файле .babelrc

Теперь создайте файл .babelrc внутри корневого каталога проекта, со следующим содержимым:
{
  "presets": ["@babel/preset-env", "@babel/preset-react"]
}

2. Создаем виртуальный сервер webpack-dev-server он позволит создавать в оперативной 
памяти скомпилированный проект и запускать его на нужном нам  порту, хосту и из какой 
папки. Установка пакета
	>npm i -D  webpack-dev-server

3. Копируем отдельные файлы или целые каталоги, которые уже существуют, в каталог сборки. 
Для этого устанавливаем плагин copy-webpack-plugin

	>npm install copy-webpack-plugin --save-dev

4. Загрузка картинок для контента.

4.1. Загрузка картинок для контента. Для этого установим библиотеку file-loader
	>npm install file-loader --save-dev
 
Указываем какие файлы будим копировать
	test: /\.(png|jpg|gif|webp)$/,

в опциях, указываем название папки, с хешированым названием файла
name: 'images/[name]-[hash].[ext]', 

4.2. Загрузка svg картинок для этого устанавливаем библиотеку svg-react-loader
    Установка
	>npm install --save-dev svg-react-loader

Эта библиотека преобразует svg фаил в react компоненту, а затем мы используем два лоадеры.
Так, как загрузка лоадеров происходит с низу вверх, загрузка будит такой:

use: [
	'babel-loader',     //2.  конвертация в ES5 
	'svg-react-loader'	//1.  преобразует svg фаил в react компоненту
]

    Преобразование svg в react компоненту позволяет нам работать с ней как с обыкновенными 
нодами, применять любые стили css.

5. Работа со стилями.

5.1. Сборка всех стилей внутри тегов <style></style> и размещение в конечном index.html
Установка
	>npm i -D css-loader style-loader

css-loader — необходим для загрузки и объединения всех CSS файлов в один,	
style-loader - добавит все стили внутрь тега документа <style></style>

5.2. Сборка всех стилей в конечном, одном style.css. Этот плагин извлекает CSS в 
отдельные файлы. Он создает файл CSS для каждого файла JS, который содержит CSS. 
Импортируем все при помощи css-loader и передаем в mini-css-extract-plugin.

Для этого устанавливаем плагин mini-css-extract-plugin
	>npm install --save-dev mini-css-extract-plugin

5.3.1. chunkhash  Для каждой новой сборки нам необходимо давать новые названия нашим 
файлам. Это необходимо для удобства, чтоб пользователь автоматически получал новую версию. 
Если этого не делать то браузер будит видить одинаковые названия файлов и брать эти файлы
из своего хэша, а не загружать новые.  
    Плагин для замены стандартного чанхэша webpack на md5. Он генерирует hash который мы 
подставим в название файла.
    Установим  
    >npm install webpack-md5-hash --save-dev

5.3.2. Для завершения хэширования названий, нам необходимо пробросить в index.html нашы 
хэшированые стили и скрипты.
Установим плагин html-webpack-plugin
	>npm i --save-dev html-webpack-plugin

5.3.3. Очистка папки перед финальной сборкой
	Установим плагин 
	>npm install --save-dev clean-webpack-plugin

5.4. При создании стилей мы можем случайно создать одинаковые названия классов в разных 
компонентах. Для избежания пересечения пространства имен нам необходимо использовать 
один из двух путей:
	1) Хранить стили внутри js файла он  добавляет хэш к названию класса
	2)Добавлять хэш к названию класса, а стили хранить в файлах css

5.4.1. Сохраняем стили внутри js файлов. Мы создаём стили внутри js в виде объектов и 
при помощи  aphrodite встраиваем их в наш компонент. 
    Установим библиотеку aphrodite
	>npm install --save aphrodite
Пример в компоненте Title


5.4.2. Добавлять хэш к названию класса, а стили хранить в файлах css. 
css modules - для его использования библиотеки не нужны. Добавляем опции к нашим стилям 
и в компоненте это описываем.

5.5 Использование препроцессора например  sass-loader. Он необходим для работы с sass 
стилями. Эта библиотека позволяет конвертировать scss в css, дальше собираем как простые
стили.

    Установка 
    >npm install sass-loader node-sass webpack --save-dev







